import React, { createContext, useCallback, useContext, useEffect, useState } from 'react'
import i18n from 'i18next'
import { KEYS } from '../constants/enums'
import { emptyFunction } from '../utils/helpers'
import { initReactI18next, useTranslation } from 'react-i18next'
import AsyncStorage from '@react-native-async-storage/async-storage'
import {
    ach,
    acm,
    acq,
    acw,
    aeb,
    aec,
    ajp,
    am,
    apc,
    arn,
    ary,
    arz,
    ass,
    ay,
    ayn,
    az,
    ba,
    bal,
    ban,
    bar,
    bem,
    bho,
    bn,
    cab,
    ceb,
    cjy,
    cs,
    ctg,
    cy,
    dcc,
    de,
    el,
    en,
    es,
    eu,
    fa,
    ff,
    fj,
    fr,
    fuv,
    fy,
    ga,
    gan,
    gd,
    gu,
    ha,
    hak,
    he,
    hi,
    hne,
    hsn,
    ht,
    hu,
    id,
    ig,
    it,
    ja,
    jv,
    kg,
    kk,
    km,
    kmr,
    kn,
    ko,
    lg,
    ln,
    mag,
    mai,
    mbc,
    mg,
    ml,
    mnp,
    mos,
    mr,
    ms,
    my,
    nac,
    nan,
    ne,
    nl,
    ny,
    oc,
    or,
    pa,
    pbu,
    pl,
    pnb,
    pt,
    qu,
    rn,
    ro,
    ru,
    rw,
    sd,
    sdh,
    shi,
    si,
    skr,
    sm,
    sn,
    so,
    su,
    sv,
    syl,
    ta,
    te,
    th,
    ti,
    tl,
    tn,
    to,
    tr,
    ts,
    tt,
    tw,
    ug,
    uk,
    ur,
    urg,
    uzn,
    vi,
    vls,
    wo,
    wuu,
    xh,
    yo,
    yue,
    zh,
    zu,
    sr,
    nr
} from '../languages'

const resources = {
    en: { translation: en },
    sr: { translation: sr },
    nr: { translation: nr },
    ach: { translation: ach },
    acm: { translation: acm },
    acq: { translation: acq },
    acw: { translation: acw },
    aeb: { translation: aeb },
    aec: { translation: aec },
    ajp: { translation: ajp },
    am: { translation: am },
    apc: { translation: apc },
    arn: { translation: arn },
    ary: { translation: ary },
    arz: { translation: arz },
    ass: { translation: ass },
    ay: { translation: ay },
    ayn: { translation: ayn },
    az: { translation: az },
    ba: { translation: ba },
    bal: { translation: bal },
    ban: { translation: ban },
    bar: { translation: bar },
    bem: { translation: bem },
    bho: { translation: bho },
    bn: { translation: bn },
    cab: { translation: cab },
    ceb: { translation: ceb },
    cjy: { translation: cjy },
    cs: { translation: cs },
    ctg: { translation: ctg },
    cy: { translation: cy },
    dcc: { translation: dcc },
    de: { translation: de },
    el: { translation: el },
    en: { translation: en },
    es: { translation: es },
    eu: { translation: eu },
    fa: { translation: fa },
    ff: { translation: ff },
    fj: { translation: fj },
    fr: { translation: fr },
    fuv: { translation: fuv },
    fy: { translation: fy },
    ga: { translation: ga },
    gan: { translation: gan },
    gd: { translation: gd },
    gu: { translation: gu },
    ha: { translation: ha },
    hak: { translation: hak },
    he: { translation: he },
    hi: { translation: hi },
    hne: { translation: hne },
    hsn: { translation: hsn },
    ht: { translation: ht },
    hu: { translation: hu },
    id: { translation: id },
    ig: { translation: ig },
    it: { translation: it },
    ja: { translation: ja },
    jv: { translation: jv },
    kg: { translation: kg },
    kk: { translation: kk },
    km: { translation: km },
    kmr: { translation: kmr },
    kn: { translation: kn },
    ko: { translation: ko },
    lg: { translation: lg },
    ln: { translation: ln },
    mag: { translation: mag },
    mai: { translation: mai },
    mbc: { translation: mbc },
    mg: { translation: mg },
    ml: { translation: ml },
    mnp: { translation: mnp },
    mos: { translation: mos },
    mr: { translation: mr },
    ms: { translation: ms },
    my: { translation: my },
    nac: { translation: nac },
    nan: { translation: nan },
    ne: { translation: ne },
    nl: { translation: nl },
    ny: { translation: ny },
    oc: { translation: oc },
    or: { translation: or },
    pa: { translation: pa },
    pbu: { translation: pbu },
    pl: { translation: pl },
    pnb: { translation: pnb },
    pt: { translation: pt },
    qu: { translation: qu },
    rn: { translation: rn },
    ro: { translation: ro },
    ru: { translation: ru },
    rw: { translation: rw },
    sd: { translation: sd },
    sdh: { translation: sdh },
    shi: { translation: shi },
    si: { translation: si },
    skr: { translation: skr },
    sm: { translation: sm },
    sn: { translation: sn },
    so: { translation: so },
    su: { translation: su },
    sv: { translation: sv },
    syl: { translation: syl },
    ta: { translation: ta },
    te: { translation: te },
    th: { translation: th },
    ti: { translation: ti },
    tl: { translation: tl },
    tn: { translation: tn },
    to: { translation: to },
    tr: { translation: tr },
    ts: { translation: ts },
    tt: { translation: tt },
    tw: { translation: tw },
    ug: { translation: ug },
    uk: { translation: uk },
    ur: { translation: ur },
    urg: { translation: urg },
    uzn: { translation: uzn },
    vi: { translation: vi },
    vls: { translation: vls },
    wo: { translation: wo },
    wuu: { translation: wuu },
    xh: { translation: xh },
    yo: { translation: yo },
    yue: { translation: yue },
    zh: { translation: zh },
    zu: { translation: zu },
}

i18n
    .use(initReactI18next)
    .init({
        resources,
        lng: 'en',
        fallbackLng: 'en',
        interpolation: {
            escapeValue: false,
        },
    })

const LanguageContext = createContext({
    t: emptyFunction,
    changeLanguage: emptyFunction,
    currentLanguage: 'en'
})

export const useLanguage = () => useContext(LanguageContext)

export const LanguageProvider = ({ children }) => {
    const { t, i18n } = useTranslation()
    const [currentLanguage, setCurrentLanguage] = useState(i18n.language)

    useEffect(() => {
        getSavedLanguage()
    }, [])

    const getSavedLanguage = useCallback(async () => {
        const fetchCurrentLanguage = await AsyncStorage.getItem(KEYS.LANGUAGE)
        if (fetchCurrentLanguage) {
            setCurrentLanguage(fetchCurrentLanguage)
            i18n.changeLanguage(fetchCurrentLanguage)
        }
    }, [])

    // useEffect(() => {
    //     setCurrentLanguage(i18n.language)
    // }, [i18n.language])

    const changeLanguage = async (lng) => {
        i18n.changeLanguage(lng)
        setCurrentLanguage(lng)
        await AsyncStorage.setItem(KEYS.LANGUAGE, lng)
    }

    return (
        <LanguageContext.Provider value={{
            t,
            changeLanguage,
            currentLanguage,
        }}>
            {children}
        </LanguageContext.Provider>
    )
} 
